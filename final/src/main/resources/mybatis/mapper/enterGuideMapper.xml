<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.EnterGuideMapper">
	  <!-- 입학안내 글 등록 -->
	<insert id="insertEnterGuide" parameterType="com.sp.app.model.EnterGuide">
	    INSERT INTO enterGuide 
	        (enterGuideNum, subject, content, hitCount, saveFilename, originalFilename, reg_date, modify_date, showEnterGuide, schoolId, categoryId)
	    VALUES 
	        (enterGuide_seq.nextval, #{subject}, #{content}, 0, #{saveFilename, jdbcType=VARCHAR}, #{originalFilename, jdbcType=VARCHAR}, SYSDATE, SYSDATE, #{showEnterGuide}, #{schoolId}, #{categoryId})
	</insert>

  
  <!-- 입학안내 글 수정 -->
  <update id="updateEnterGuide" parameterType="com.sp.app.model.EnterGuide">
    UPDATE enterGuide
    SET subject = #{subject},
        content = #{content},
        hitCount = #{hitCount},
        saveFilename = #{saveFilename},
        originalFilename = #{originalFilename},
        modify_date = SYSDATE,
        showEnterGuide = #{showEnterGuide},
        categoryId = #{categoryId}
    WHERE enterGuideNum = #{enterGuideNum}
  </update>
  
  <!-- 입학안내 글 삭제 -->
  <delete id="deleteEnterGuide" parameterType="long">
    DELETE FROM enterGuide
    WHERE enterGuideNum = #{enterGuideNum}
  </delete>
  
  <!-- 단건 조회 (PK: enterGuideNum) -->
  <select id="findEnterGuideById" parameterType="long" resultType="com.sp.app.model.EnterGuide">
    SELECT enterGuideNum, subject, content, hitCount, saveFilename, originalFilename,
           TO_CHAR(reg_date, 'YYYY-MM-DD') AS reg_date,
           TO_CHAR(modify_date, 'YYYY-MM-DD') AS modify_date,
           showEnterGuide, schoolId, categoryId
    FROM enterGuide
    WHERE enterGuideNum = #{enterGuideNum}
  </select>
  
  <!-- 조건에 따른 입학안내 글 목록 조회 -->
  <select id="listEnterGuide" parameterType="map" resultType="com.sp.app.model.EnterGuide">
  SELECT e.enterGuideNum,
         e.subject,
         e.content,
         e.hitCount,
         e.saveFilename,
         e.originalFilename,
         TO_CHAR(e.reg_date, 'YYYY-MM-DD') AS reg_date,
         TO_CHAR(e.modify_date, 'YYYY-MM-DD') AS modify_date,
         e.showEnterGuide,
         e.schoolId,
         e.categoryId,
         c.categoryName
  FROM enterGuide e
  LEFT JOIN enterGuideCategory c ON e.categoryId = c.categoryId
  <where>
    <!-- 카테고리 필터 추가: 1이면 전체 -->
    <if test="categoryId != null and categoryId != 1">
      AND e.categoryId = #{categoryId}
    </if>  
    <if test="kwd != null and kwd != ''">
      AND (e.subject LIKE '%' || #{kwd} || '%' OR e.content LIKE '%' || #{kwd} || '%')
    </if>
  </where>
  ORDER BY e.enterGuideNum DESC
  OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
</select>
  
  <!-- 조회수 업데이트 -->
  <update id="updateHitCount" parameterType="long">
    UPDATE enterGuide
    SET hitCount = hitCount + 1
    WHERE enterGuideNum = #{enterGuideNum}
  </update>
  
  <!-- 이전 글 조회 -->
  <select id="findByPrev" parameterType="map" resultType="com.sp.app.model.EnterGuide">
    SELECT *
    FROM (
      SELECT enterGuideNum, subject, content, hitCount, saveFilename, originalFilename,
             TO_CHAR(reg_date, 'YYYY-MM-DD') AS reg_date,
             TO_CHAR(modify_date, 'YYYY-MM-DD') AS modify_date,
             showEnterGuide, schoolId, categoryId
      FROM enterGuide
      <where>
         <if test="enterGuideNum != null">
           AND enterGuideNum &lt; #{enterGuideNum}
         </if>
         <if test="kwd != null and kwd != ''">
           AND (subject LIKE '%' || #{kwd} || '%' OR content LIKE '%' || #{kwd} || '%')
         </if>
      </where>
      ORDER BY enterGuideNum DESC
    )
    WHERE ROWNUM = 1
  </select>
  
  <!-- 다음 글 조회 -->
  <select id="findByNext" parameterType="map" resultType="com.sp.app.model.EnterGuide">
    SELECT *
    FROM (
      SELECT enterGuideNum, subject, content, hitCount, saveFilename, originalFilename,
             TO_CHAR(reg_date, 'YYYY-MM-DD') AS reg_date,
             TO_CHAR(modify_date, 'YYYY-MM-DD') AS modify_date,
             showEnterGuide, schoolId, categoryId
      FROM enterGuide
      <where>
         <if test="enterGuideNum != null">
           AND enterGuideNum &gt; #{enterGuideNum}
         </if>
         <if test="kwd != null and kwd != ''">
           AND (subject LIKE '%' || #{kwd} || '%' OR content LIKE '%' || #{kwd} || '%')
         </if>
      </where>
      ORDER BY enterGuideNum ASC
    )
    WHERE ROWNUM = 1
  </select>
  
  	<sql id="where-list">
		<choose>
			<when test="schType == 'all' ">
			   ( INSTR(subject, #{kwd}) &gt; 0
		          OR DBMS_LOB.INSTR(content, #{kwd}) &gt; 0 )
			</when>
			<when test="schType == 'reg_date' ">
			   ( TO_CHAR(reg_date, 'YYYYMMDD') = #{kwd}
		          OR TO_CHAR(reg_date, 'YYYY-MM-DD') = #{kwd} )
			</when>
			<when test="schType == 'content'">
			    DBMS_LOB.INSTR(content, #{kwd}) &gt; 0
			</when>
			<otherwise>
			    INSTR(${schType}, #{kwd}) &gt; 0
			</otherwise>
		</choose>
	</sql>
	
	<select id="enterGuideDataCount" parameterType="map" resultType="int">
	  SELECT NVL(COUNT(*), 0)
	  FROM enterGuide e
	  JOIN schoolMember sm ON sm.schoolId = e.schoolId
	  <where>
	    <if test="categoryId != null and categoryId != 1">
	      AND e.categoryId = #{categoryId}
	    </if>			
	    <if test="kwd != null and kwd != ''">
	      AND ( <include refid="where-list"/> )
	    </if>
	  </where>   
	</select>

</mapper>