<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.CommunityMapper">
  
  <!-- 게시글 등록 -->
  <insert id="insertCommunity" parameterType="com.sp.app.model.Community">
    INSERT INTO community 
      (communityNum, studentId, subject, content, hitCount, reg_date, modify_date, showcommunity)
    VALUES 
      (community_seq.nextval, #{studentId}, #{subject}, #{content}, #{hitCount}, SYSDATE, SYSDATE, #{showcommunity})
  </insert>
  
  <!-- 게시글 수정 -->
  <update id="updateCommunity" parameterType="com.sp.app.model.Community">
    UPDATE community
    SET subject = #{subject},
        content = #{content},
        modify_date = SYSDATE,
        showcommunity = #{showcommunity}
    WHERE communityNum = #{communityNum}
  </update>
  
  <!-- 게시글 삭제 -->
  <delete id="deleteCommunity" parameterType="com.sp.app.model.Community">
    DELETE FROM community
    WHERE communityNum = #{communityNum}
  </delete>
  
  <!-- 게시글 데이터 건수 조회 -->
  <select id="dataCount" parameterType="map" resultType="int">
    SELECT COUNT(*) FROM community
    <where>
      <if test="keyword != null and keyword != ''">
         AND (subject LIKE '%' || #{keyword} || '%' OR content LIKE '%' || #{keyword} || '%')
      </if>
    </where>
  </select>
  
  <!-- 게시글 목록 조회 -->
  <select id="listCommunity" parameterType="map" resultType="com.sp.app.model.Community">
    SELECT communityNum, studentId, subject, content, hitCount,
           TO_CHAR(reg_date, 'YYYY-MM-DD') AS reg_date,
           TO_CHAR(modify_date, 'YYYY-MM-DD') AS modify_date,
           showcommunity
    FROM community
    <where>
      <if test="keyword != null and keyword != ''">
         AND (subject LIKE '%' || #{keyword} || '%' OR content LIKE '%' || #{keyword} || '%')
      </if>
    </where>
    ORDER BY communityNum DESC
  </select>
  
  <!-- 게시글 단건 조회 -->
  <select id="findById" parameterType="long" resultType="com.sp.app.model.Community">
    SELECT communityNum, studentId, subject, content, hitCount,
           TO_CHAR(reg_date, 'YYYY-MM-DD') AS reg_date,
           TO_CHAR(modify_date, 'YYYY-MM-DD') AS modify_date,
           showcommunity
    FROM community
    WHERE communityNum = #{communityNum}
  </select>
  
  <!-- 게시글 조회수 증가 -->
  <update id="updateHitCount" parameterType="long">
    UPDATE community
    SET hitCount = hitCount + 1
    WHERE communityNum = #{communityNum}
  </update>
  
  <!-- 이전 게시글 조회 -->
  <select id="findByPrev" parameterType="map" resultType="com.sp.app.model.Community">
    SELECT *
    FROM (
      SELECT *
      FROM community
      <where>
         <if test="communityNum != null">
            AND communityNum &lt; #{communityNum}
         </if>
         <if test="keyword != null and keyword != ''">
            AND (subject LIKE '%' || #{keyword} || '%' OR content LIKE '%' || #{keyword} || '%')
         </if>
      </where>
      ORDER BY communityNum DESC
    )
    WHERE ROWNUM = 1
  </select>
  
  <!-- 다음 게시글 조회 -->
  <select id="findByNext" parameterType="map" resultType="com.sp.app.model.Community">
    SELECT *
    FROM (
      SELECT *
      FROM community
      <where>
         <if test="communityNum != null">
            AND communityNum &gt; #{communityNum}
         </if>
         <if test="keyword != null and keyword != ''">
            AND (subject LIKE '%' || #{keyword} || '%' OR content LIKE '%' || #{keyword} || '%')
         </if>
      </where>
      ORDER BY communityNum ASC
    )
    WHERE ROWNUM = 1
  </select>
  
  <!-- 게시글 좋아요 등록 -->
  <insert id="insertCommunityLike" parameterType="map">
    INSERT INTO communityLike (communityNum, studentId)
    VALUES (#{communityNum}, #{studentId})
  </insert>
  
  <!-- 게시글 좋아요 삭제 -->
  <delete id="deleteCommunityLike" parameterType="map">
    DELETE FROM communityLike
    WHERE communityNum = #{communityNum} AND studentId = #{studentId}
  </delete>
  
  <!-- 게시글 좋아요 수 조회 -->
  <select id="CommunityLikeCount" parameterType="long" resultType="int">
    SELECT COUNT(*) FROM communityLike
    WHERE communityNum = #{num}
  </select>
  
  <!-- 사용자가 게시글 좋아요를 눌렀는지 조회 -->
  <select id="userCommunityLiked" parameterType="map" resultType="com.sp.app.model.Community">
    SELECT * FROM communityLike
    WHERE communityNum = #{communityNum} AND studentId = #{studentId}
  </select>
  
  <!-- 댓글 등록 (커뮤니티 댓글) -->
  <insert id="insertReply" parameterType="com.sp.app.model.CommunityReply">
    INSERT INTO communityReply (replyNum, communityNum, studentId, content, reg_date, parentNum, showReply, showCommunityReply)
    VALUES (communityReply_seq.nextval, #{communityNum}, #{studentId}, #{content}, SYSDATE, #{parentNum}, #{showReply}, #{showCommunityReply})
  </insert>
  
  <!-- 댓글 수 조회 -->
  <select id="replyCount" parameterType="map" resultType="int">
    SELECT COUNT(*) FROM communityReply
    <where>
      <if test="communityNum != null">
         AND communityNum = #{communityNum}
      </if>
    </where>
  </select>
  
  <!-- 댓글 목록 조회 -->
  <select id="listReply" parameterType="map" resultType="com.sp.app.model.CommunityReply">
    SELECT replyNum, communityNum, studentId, content,
           TO_CHAR(reg_date, 'YYYY-MM-DD') AS reg_date,
           TO_CHAR(modify_date, 'YYYY-MM-DD') AS modify_date,
           parentNum, showReply, showCommunityReply
    FROM communityReply
    <where>
      <if test="communityNum != null">
         AND communityNum = #{communityNum}
      </if>
    </where>
    ORDER BY replyNum ASC
  </select>
  
  <!-- 댓글 삭제 -->
  <delete id="deleteReply" parameterType="map">
    DELETE FROM communityReply
    WHERE replyNum = #{replyNum}
  </delete>
  
  <!-- 댓글 좋아요 / 싫어요 등록 -->
  <insert id="insertReplyLike" parameterType="map">
    INSERT INTO communityReplyLike (replyNum, studentId, replyLike)
    VALUES (#{replyNum}, #{studentId}, #{replyLike})
  </insert>
  
  <!-- 댓글 좋아요 / 싫어요 수 조회 -->
  <select id="replyLikeCount" parameterType="map" resultType="map">
    SELECT replyNum,
           SUM(CASE WHEN replyLike = 1 THEN 1 ELSE 0 END) AS likeCount,
           SUM(CASE WHEN replyLike = 0 THEN 1 ELSE 0 END) AS disLikeCount
    FROM communityReplyLike
    WHERE replyNum = #{replyNum}
    GROUP BY replyNum
  </select>
  
  <!-- 사용자가 댓글에 대해 좋아요/싫어요를 눌렀는지 조회 -->
  <select id="userReplyLiked" parameterType="map" resultType="int">
    SELECT replyLike
    FROM communityReplyLike
    WHERE replyNum = #{replyNum} AND studentId = #{studentId}
  </select>
  
  <!-- 댓글 숨김/표시 업데이트 -->
  <update id="updateReplyShowHide" parameterType="map">
    UPDATE communityReply
    SET showReply = #{showReply}
    WHERE replyNum = #{replyNum}
  </update>

</mapper>