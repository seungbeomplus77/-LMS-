<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.CommunityMapper">
  
  <!-- 게시글 등록 -->
  <insert id="insertCommunity" parameterType="com.sp.app.model.Community">
    INSERT INTO community 
      (communityNum, studentId, subject, content, hitCount, block, reg_date, modify_date, showCommunity, categoryNum)
    VALUES 
      (community_seq.nextval, #{studentId}, #{subject}, #{content}, 0, 0, SYSDATE, SYSDATE, #{showCommunity}, #{categoryNum})
  </insert>

  <sql id="where-list">
    <choose>
      <when test="schType == 'all' ">
         ( INSTR(subject, #{kwd}) &gt; 0
           OR DBMS_LOB.INSTR(content, #{kwd}) &gt; 0 )
      </when>
      <when test="schType == 'reg_date' ">
      
         ( TO_CHAR(reg_date, 'YYYYMMDD') = #{kwd}
           OR TO_CHAR(reg_date, 'YYYY-MM-DD') = #{kwd} )
      </when>
      <when test="schType == 'content'">
          DBMS_LOB.INSTR(content, #{kwd}) &gt; 0
      </when>
      <otherwise>
          INSTR(${schType}, #{kwd}) &gt; 0
      </otherwise>
    </choose>
  </sql>
  
<!-- 게시글 데이터 건수 조회 -->
<select id="dataCount" parameterType="map" resultType="int">
  SELECT NVL(COUNT(*), 0)
  FROM community c
       JOIN schoolMember m
         ON c.studentId = m.userId
  <where>
    <if test="categoryNum != null and categoryNum != 1">
      AND c.categoryNum = #{categoryNum}
    </if>
    <if test="kwd != null and kwd != ''">
      AND ( <include refid="where-list"/> )
    </if>
  </where>
</select>
	
	<select id="findCommunityById" parameterType="Long"
			resultType="com.sp.app.model.Community">
		SELECT b.communityNum, b.studentId, subject, content,
			   hitCount, b.reg_date, block,
			   NVL(boardLikeCount, 0) boardLikeCount
		FROM community b
		JOIN schoolMember m ON b.studentId = m.userId
		LEFT OUTER JOIN (
			SELECT communityNum, COUNT(*) boardLikeCount
			FROM communityLike
			WHERE communityNum = #{communityNum}
			GROUP BY communityNum
		) bc ON b.communityNum = bc.communityNum
		WHERE b.communityNum = #{communityNum} AND block = 0		
	</select>  
  
  <!-- 게시글 수정 -->
  <update id="updateCommunity" parameterType="com.sp.app.model.Community">
    UPDATE community
    SET subject = #{subject},
        content = #{content},
        modify_date = SYSDATE,
        showCommunity = #{showCommunity}
    WHERE communityNum = #{communityNum}
  </update>
  
  <!-- 게시글 조회수 증가 -->
  <update id="updateHitCount" parameterType="long">
    UPDATE community
    SET hitCount = hitCount + 1
    WHERE communityNum = #{communityNum}
  </update>
  
  <!-- 게시글 삭제 -->
  <delete id="deleteCommunity" parameterType="com.sp.app.model.Community">
    DELETE FROM community
    WHERE communityNum = #{communityNum}
  </delete>
  
  <!-- 게시글 좋아요 등록 -->
  <insert id="insertCommunityLike" parameterType="map">
    INSERT INTO communityLike (communityNum, studentId)
    VALUES (#{communityNum}, #{studentId})
  </insert>
  
  <!-- 게시글 좋아요 삭제 -->
  <delete id="deleteCommunityLike" parameterType="map">
    DELETE FROM communityLike
    WHERE communityNum = #{communityNum} AND studentId = #{studentId}
  </delete>
  
  <!-- 게시글 좋아요 수 조회 -->
  <select id="CommunityLikeCount" parameterType="long" resultType="int">
    SELECT COUNT(*) FROM communityLike
    WHERE communityNum = #{communityNum}
  </select>
  
  <!-- 사용자가 게시글 좋아요를 눌렀는지 조회 -->
  <select id="userCommunityLiked" parameterType="map" resultType="com.sp.app.model.Community">
    SELECT communityNum, studentId
    FROM communityLike
    WHERE communityNum = #{communityNum} AND studentId = #{studentId}
  </select>
  
  <!-- 댓글 수 조회 -->
  <select id="replyCount" parameterType="map" resultType="int">c.studentId = m.userId
    SELECT NVL(COUNT(*), 0) 
    FROM communityReply
    WHERE communityNum = #{communityNum} AND parentNum = 0 AND block = 0
    <if test="schoolId == 10">
      AND ( showReply = 1 OR ( showReply = 0 AND studentId = #{studentId} ))
    </if>  	
  </select>
  
  <!-- 댓글 목록 조회 -->
  <select id="listReply" parameterType="map" resultType="com.sp.app.model.CommunityReply">
    SELECT r.replyNum, r.communityNum, r.studentId, r.content,
           TO_CHAR(r.reg_date, 'YYYY-MM-DD') AS reg_date,
           TO_CHAR(r.modify_date, 'YYYY-MM-DD') AS modify_date,
           r.showReply, r.showCommunityReply,
           NVL(answerCount, 0) answerCount,
           NVL(likeCount, 0) likeCount,
           NVL(disLikeCount, 0) disLikeCount
    FROM communityReply r
    JOIN schoolMember m ON r.studentId = m.userId
    LEFT OUTER JOIN (
      SELECT parentNum, COUNT(*) answerCount
      FROM communityReply 
      WHERE parentNum != 0 AND block = 0    
      <if test="schoolId == 10">
         AND ( showReply = 1 OR ( showReply = 0 AND studentId = #{studentId} ))
      </if>
      GROUP BY parentNum
    ) a ON r.replyNum = a.parentNum
    LEFT OUTER JOIN (
      SELECT replyNum, COUNT(DECODE(replyLike, 1, 1)) likeCount,
             COUNT(DECODE(replyLike, 0, 1)) disLikeCount
      FROM communityReplyLike
      GROUP BY replyNum
    ) c ON r.replyNum = c.replyNum
    WHERE communityNum = #{communityNum} AND r.parentNum = 0 AND r.block = 0
    <if test="schoolId == 10">
      AND ( showReply = 1 OR ( showReply = 0 AND r.studentId = #{studentId} ))
    </if>
    ORDER BY r.replyNum DESC
    OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY		
  </select>
  
	<!-- 게시글 목록 조회 -->
	<select id="listCommunity" parameterType="map" resultType="com.sp.app.model.Community">
	  SELECT
	    c.communityNum,
	    c.studentId,     
	    m.userName,
	    c.subject,
	    c.content,
	    c.hitCount,
	    c.categoryNum,
	    TO_CHAR(c.reg_date, 'YYYY-MM-DD') AS reg_date,
	    TO_CHAR(c.modify_date, 'YYYY-MM-DD') AS modify_date,
	    c.showCommunity,
	    NVL(r.replyCount, 0) replyCount
	  FROM community c
	       JOIN schoolMember m
	         ON c.studentId = m.userId
	       LEFT OUTER JOIN (
	         SELECT communityNum, COUNT(*) replyCount
	         FROM communityReply
	         WHERE parentNum = 0
	           AND showReply = 1
	           AND block = 0
	         GROUP BY communityNum
	       ) r
	         ON c.communityNum = r.communityNum
	  <where>
	    
	    <if test="categoryNum != null and categoryNum != 1">
	      AND c.categoryNum = #{categoryNum}
	    </if>  	  
	    
	    <if test="kwd != null and kwd != ''">
	      AND (
	          c.subject LIKE '%' || #{kwd} || '%'
	          OR c.content LIKE '%' || #{kwd} || '%'
	      )
	    </if>
	    AND c.block = 0
	  </where>
	  ORDER BY c.communityNum DESC
	  OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>

  <select id="findByPrev" parameterType="map" resultType="com.sp.app.model.Community">
    SELECT communityNum, subject
    FROM community c
    JOIN schoolMember m ON c.studentId = m.userId
    <where>
      <if test="kwd != null and kwd != '' ">
        <include refid="where-list"/>
      </if>
      AND (communityNum &gt; #{communityNum})
      AND c.block = 0
    </where>
    ORDER BY communityNum ASC
    FETCH FIRST 1 ROWS ONLY
  </select>
  
  <select id="findByNext" parameterType="map" resultType="com.sp.app.model.Community">
    SELECT communityNum, subject
    FROM community c
    JOIN schoolMember m ON c.studentId = m.userId
    <where>
      <if test="kwd != null and kwd != '' ">
        <include refid="where-list"/>
      </if>
      AND (communityNum &lt; #{communityNum})
      AND c.block = 0
    </where>
    ORDER BY communityNum DESC
    FETCH FIRST 1 ROWS ONLY
  </select>

</mapper>
